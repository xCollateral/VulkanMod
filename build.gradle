plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id 'maven-publish'
}

import org.gradle.work.Incremental
import org.gradle.work.InputChanges

import java.nio.file.Files;
import java.nio.file.Paths;

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

project.ext.lwjglVersion = "3.3.1"
project.ext.jomlVersion = "1.10.4"
project.ext.winNatives = "natives-windows"
project.ext.linuxNatives = "natives-linux"

dependencies {
	include(implementation("org.lwjgl:lwjgl:$lwjglVersion"))
	include(implementation("org.lwjgl:lwjgl-vulkan:$lwjglVersion"))
	include(implementation("org.lwjgl:lwjgl-vma:$lwjglVersion"))
	include(implementation("org.joml:joml:${jomlVersion}"))
	include(runtimeOnly("org.lwjgl:lwjgl-vma:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl-vma:$lwjglVersion:$linuxNatives"))

	include(implementation("org.lwjgl:lwjgl-glfw:$lwjglVersion"))
	include(runtimeOnly("org.lwjgl:lwjgl-glfw:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl-glfw:$lwjglVersion:$linuxNatives"))
	include(implementation("org.lwjgl:lwjgl-stb:$lwjglVersion"))
	include(runtimeOnly("org.lwjgl:lwjgl-stb:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl-stb:$lwjglVersion:$linuxNatives"))
	include(implementation("org.lwjgl:lwjgl-openal:$lwjglVersion"))
	include(runtimeOnly("org.lwjgl:lwjgl-openal:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl-openal:$lwjglVersion:$linuxNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl:$lwjglVersion:$linuxNatives"))
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

loom {
	accessWidenerPath = file("src/main/resources/vulkanmod.accesswidener")
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

abstract class IncrementalReverseTask extends DefaultTask {
	@Incremental
	@InputDirectory
	abstract DirectoryProperty getInputDir()

	@OutputDirectory
	abstract DirectoryProperty getOutputDir()

	@TaskAction
	void execute(InputChanges inputChanges) {
		inputChanges.getFileChanges(inputDir).each { change ->
			if (change.fileType == FileType.DIRECTORY) return

			def targetFile = outputDir.file(change.normalizedPath).get().asFile
			if (change.changeType == ChangeType.REMOVED) {
				targetFile.delete()
			} else {
				targetFile.text = change.file.text.reverse()
			}
		}
	}
}
/*var Stage = "frag" //Overrides File Extension
//Indealy would add Mu;toTherad Invoke/Compile but will keep things simple for now
final String glslc = "assets/vulkanmod/glslc.exe"
task:PrecompShaders(type: exec, File, String)
		{
			exec {glslc "-fshader-stage=vert blit_screen.frag -c -mfmt=c -finvert-y  -fshader-stage=Stage --target-env=vulkan1.3 -O -o -"}
		}*/
ArrayList<String> namesFrag = []
//ArrayList<String> namesvert = []


final byte[] cltr=("default -> throw new RuntimeException(\"Fail!: Invalid Shader File!\");\n};" +
		"ByteBuffer axl = ByteBuffer.allocateDirect(ax.length*4).order(ByteOrder.LITTLE_ENDIAN);\n" +
		"  axl.asIntBuffer().put(ax);\n" +
		"  currentSize=axl.remaining();\n" +
		"return memAddress0(axl);\n}\n}").getBytes()
final byte[] aaa= ("}));\n}\n").getBytes()

task genFraggerFiles(type: Copy) {

		from "$projectDir\\src\\main\\resources\\assets\\vulkanmod\\shaders\\core"
		into 'temDir/Fragger'
		include '**/*.fsh'
		exclude '**/*.vsh'
//	from "$projectDir\\src\\main\\resources\\assets\\vulkanmod\\shaders\\core"
//				into 'temDir/Vertxs'
//				include '**/*.vsh'
//				exclude '**/*.fsh'
		System.out.println("$projectDir\\src\\main\\resources\\assets\\vulkanmod\\shaders\\core")
		fileTree("temDir/Fragger").visit { FileVisitDetails details ->
			namesFrag << details.file.name.substring(0, details.file.name.indexOf("."))
		}
		System.out.println(namesFrag);

	//on windows:
//	commandLine 'cmd', '/c', 'stop.bat'
//	logging.captureStandardOutput LogLevel.INFO
//	standardInput = new ByteArrayInputStream()
//	file = new File().canExecute(true, true);
//	standardOutput = new ByteArrayOutputStream()

doLast {
	/*workingDir "temDir/Fragger"
	inputs.dir(workingDir)
	outputs.file("$projectDir\\src\\main\\java\\net\\vulkanmod\\sdrs\\a.java")*/

	FileOutputStream file = new FileOutputStream("$projectDir\\src\\main\\java\\net\\vulkanmod\\sdrs\\a.java")
//	ArrayList<Integer> buf= []
	String cl = "package net.vulkanmod.sdrs;\n" +
			"\n" +
			"import java.nio.ByteBuffer;\n" +
			"import java.nio.ByteOrder;\n" +
			"\n" +
			"import static org.lwjgl.system.MemoryUtil.memAddress0;" +
			"\n" +
			"public class  a\n{\n public static int currentSize;\n"
	file.write(cl.getBytes())

	var axx = new ByteArrayOutputStream()
	for (final String name in namesFrag) {
		exec {
			workingDir "temDir"
			executable = 'glslc.exe'
			args('-fshader-stage=frag', "Fragger/" + name + ".fsh", '-c', '-mfmt=num', '-O', '-o', '-')

			standardOutput = axx

			ignoreExitValue(true)
		}

		if (axx.size() == 0) //replace failing shaders that fail to compile with nulls
		{
			file.write(("private static int[] $name ()\n { \n return null;}").getBytes())
			continue
		}
		file.write(("private static int[] $name ()\n { \n return ((new int[]{").getBytes())
		file.write(axx.toByteArray())
		file.write((aaa))
		axx.reset()


	}
	file.flush()
	cases(file, namesFrag)

	file.write(cltr)
	file.close()
}




//	commandLine './stop.sh'
//	System.out.println(executionResult)
//	System.out.println(commandLine)
//	System.out.println(errorOutput)
//	//store the output instead of printing to the console:
//	System.out.println(standardOutput.toString())





//	//extension method stopTomcat.output() can be used to obtain the output:
/*		standardOutput = new ByteArrayOutputStream()
	ext.output = {
		return standardOutput.toByteArray();
	}*/
}

task genVertxsFiles(type: Copy)
{
		from "$projectDir\\src\\main\\resources\\assets\\vulkanmod\\shaders\\core"
		into 'temDir/Vertxs'
		include '**/*.vsh'
		exclude '**/*.fsh'
//	from "$projectDir\\src\\main\\resources\\assets\\vulkanmod\\shaders\\core"
//				into 'temDir/Vertxs'
//				include '**/*.vsh'
//				exclude '**/*.fsh'
		System.out.println("$projectDir\\src\\main\\resources\\assets\\vulkanmod\\shaders\\core")

	doLast {
		var file = new FileOutputStream("$projectDir\\src\\main\\java\\net\\vulkanmod\\sdrs\\b.java")
		String cl = "package net.vulkanmod.sdrs;\n" +
				"\n" +
				"import java.nio.ByteBuffer;\n" +
				"import java.nio.ByteOrder;\n" +
				"\n" +
				"import static org.lwjgl.system.MemoryUtil.memAddress0;" +
				"\n" +
				"public class  b\n{\n public static int currentSize;\n"
		file.write(cl.getBytes())
		var axx = new ByteArrayOutputStream();
		for (final String name in namesFrag) {
			exec {
				workingDir "temDir"
				executable = 'glslc.exe'
				commandLine(executable, '-fshader-stage=vert', "Vertxs/" + name + ".vsh", '-c', '-mfmt=num', '-O', '-o', '-')
				standardOutput = axx
				ignoreExitValue(true)
			}
			if (axx.size() == 0) //replace failing shaders that fail to compile with nulls
			{
				file.write(("private static int[] $name ()\n { \n return null;}").getBytes())
				continue
			}
			file.write(("private static int[] $name()\n { \n return ((new int[]{").getBytes())
			file.write(axx.toByteArray())
			file.write((aaa))
			axx.reset()


		}
		file.flush()
		cases(file, namesFrag)

		file.write(cltr)
		file.close()
	}
}

gradle.afterProject { project ->
	println ((project.state.failure) ?
		 "Evaluation of $project FAILED" : "Evaluation of $project succeeded")
}

private static final void cases(FileOutputStream file, ArrayList namesFrag) {
	file.write(("public static long getFunc(String aa)\n { \n\t int[]ax = switch(aa) \n { \n\t").getBytes())
	for (String name : namesFrag) {
		file.write(("case\"$name\" ->$name();\n\t").getBytes())
	}
}

