plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

project.ext.lwjglVersion = "3.3.1"
project.ext.jomlVersion = "1.10.5"
project.ext.winNatives = "natives-windows"
project.ext.linuxNatives = "natives-linux"

dependencies {
	include(implementation("org.lwjgl:lwjgl:$lwjglVersion"))
	include(implementation("org.lwjgl:lwjgl-vulkan:$lwjglVersion"))
	include(implementation("org.lwjgl:lwjgl-vma:$lwjglVersion"))
	include(implementation("org.joml:joml:${jomlVersion}"))
	include(runtimeOnly("org.lwjgl:lwjgl-vma:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl-vma:$lwjglVersion:$linuxNatives"))

	include(implementation("org.lwjgl:lwjgl-glfw:$lwjglVersion"))
	include(runtimeOnly("org.lwjgl:lwjgl-glfw:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl-glfw:$lwjglVersion:$linuxNatives"))
	include(implementation("org.lwjgl:lwjgl-stb:$lwjglVersion"))
	include(runtimeOnly("org.lwjgl:lwjgl-stb:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl-stb:$lwjglVersion:$linuxNatives"))
	include(implementation("org.lwjgl:lwjgl-openal:$lwjglVersion"))
	include(runtimeOnly("org.lwjgl:lwjgl-openal:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl-openal:$lwjglVersion:$linuxNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl:$lwjglVersion:$linuxNatives"))
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

loom {
	accessWidenerPath = file("src/main/resources/vulkanmod.accesswidener")
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

ArrayList<String> namesFrag = []
ArrayList<String> namesVert = []


final byte[] cltr=("default -> throw new RuntimeException(\"Fail!: Invalid Shader File!\");\n};" +
		"ByteBuffer axl = ByteBuffer.allocateDirect(ax.length*4).order(ByteOrder.LITTLE_ENDIAN);\n" +
		"  axl.asIntBuffer().put(ax);\n" +
		"  currentSize=axl.remaining();\n" +
		"return memAddress0(axl);\n}\n}").getBytes()
final byte[] aaa= ("}));\n}\n").getBytes()

final String DefBoilerPlate = "package net.vulkanmod.sdrs;\n" +
		"\n" +
		"import java.nio.ByteBuffer;\n" +
		"import java.nio.ByteOrder;\n" +
		"\n" +
		"import static org.lwjgl.system.MemoryUtil.memAddress0;" +
		"\n";


task genFraggerFiles(type: Copy) {
	String Def ='Fragger';
	from "$projectDir/src/main/resources/assets/vulkanmod/shaders/core"
	into 'temDir/'+Def
	include '**/*.fsh'
	exclude '**/*.vsh'
//	from "$projectDir/src/main/resources/assets/vulkanmod/shaders/core"
//				into 'temDir/Vertxs'
//				include '**/*.vsh'
//				exclude '**/*.fsh'
	System.out.println("$projectDir/src/main/resources/assets/vulkanmod/shaders/core")
	doFirst {
		fileTree("temDir/" + Def).visit { FileVisitDetails details ->
			namesFrag << details.file.name.substring(0, details.file.name.indexOf("."))
		}
	}
	final def ShaderStage = 'frag'

	doLast {

		preCompShaders(DefBoilerPlate, namesFrag, ShaderStage, Def, aaa, cltr, "a", ".fsh")
	}
}

private void preCompShaders(String DefBoilerPlate, ArrayList<String> namesFrag, ShaderStage, String Def, byte[] aaa, byte[] cltr, String DefName, DefExt) {
	FileOutputStream file = new FileOutputStream("$projectDir/src/main/java/net/vulkanmod/sdrs/$DefName"+".java")
	String cl = DefBoilerPlate +
			"public class  $DefName\n{\n public static int currentSize;\n"
	file.write(cl.getBytes())
	var axx = new ByteArrayOutputStream()
	for (final String name in (namesFrag)) {
		exec {

			workingDir "temDir"
			executable = 'glslc.exe'

			args('-fshader-stage=' + ShaderStage, "$Def/" + name + DefExt, '-c', '--target-env=vulkan1.1', '-mfmt=num', '-O', '-o', '-')

			standardOutput = axx

			ignoreExitValue(true)
		}

		if (axx.size() == 0) //replace failing shaders that fail to compile with nulls
		{
			file.write(("private static int[] $name()\n { \n return null;}").getBytes())
			continue
		}
		file.write(("private static int[] $name()\n { \n return ((new int[]{").getBytes())
		file.write(axx.toByteArray())
		file.write(aaa)
		axx.reset()


	}
	file.flush()
	cases(file, namesFrag)
	file.write(cltr)
	file.close()
}


task genVertxsFiles(type: Copy)
{
	String Def ='Vertxs';
	from "$projectDir/src/main/resources/assets/vulkanmod/shaders/core"
	into 'temDir/'+Def
	include '**/*.vsh'
	exclude '**/*.fsh'
//	from "$projectDir/src/main/resources/assets/vulkanmod/shaders/core"
//				into 'temDir/Vertxs'
//				include '**/*.vsh'
//				exclude '**/*.fsh'
	System.out.println("$projectDir/src/main/resources/assets/vulkanmod/shaders/core")
	doFirst {
		fileTree("temDir/$Def").visit { FileVisitDetails details1 ->
			namesVert << details1.file.name.substring(0, details1.file.name.indexOf("."))
		}
	}
	final def ShaderStage = 'vert'

	doLast {
		preCompShaders(DefBoilerPlate, namesVert, ShaderStage, Def, aaa, cltr, "b", ".vsh")

	}
}

gradle.afterProject { project ->
	println ((project.state.failure) ?
			"Evaluation of $project FAILED" : "Evaluation of $project succeeded")
}

private static final void cases(FileOutputStream file, ArrayList namesFrag) {
	file.write(("public static long getFunc(String aa)\n { \n\t int[]ax = switch(aa) \n { \n\t").getBytes())
	for (String name : namesFrag) {
		file.write(("case\"$name\" ->$name();\n\t").getBytes())
	}
}

