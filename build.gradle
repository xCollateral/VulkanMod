plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id 'maven-publish'
}
import java.nio.file.Files;
import java.nio.file.Paths;

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

project.ext.lwjglVersion = "3.3.1"
project.ext.jomlVersion = "1.10.4"
project.ext.winNatives = "natives-windows"
project.ext.linuxNatives = "natives-linux"

dependencies {
	include(implementation("org.lwjgl:lwjgl:$lwjglVersion"))
	include(implementation("org.lwjgl:lwjgl-vulkan:$lwjglVersion"))
	include(implementation("org.lwjgl:lwjgl-vma:$lwjglVersion"))
	include(implementation("org.joml:joml:${jomlVersion}"))
	include(runtimeOnly("org.lwjgl:lwjgl-vma:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl-vma:$lwjglVersion:$linuxNatives"))

	include(implementation("org.lwjgl:lwjgl-glfw:$lwjglVersion"))
	include(runtimeOnly("org.lwjgl:lwjgl-glfw:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl-glfw:$lwjglVersion:$linuxNatives"))
	include(implementation("org.lwjgl:lwjgl-stb:$lwjglVersion"))
	include(runtimeOnly("org.lwjgl:lwjgl-stb:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl-stb:$lwjglVersion:$linuxNatives"))
	include(implementation("org.lwjgl:lwjgl-openal:$lwjglVersion"))
	include(runtimeOnly("org.lwjgl:lwjgl-openal:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl-openal:$lwjglVersion:$linuxNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl:$lwjglVersion:$linuxNatives"))

	include(implementation("org.lwjgl:lwjgl-shaderc:$lwjglVersion"))
	include(runtimeOnly("org.lwjgl:lwjgl-shaderc:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl-shaderc:$lwjglVersion:$linuxNatives"))
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

loom {
	accessWidenerPath = file("src/main/resources/vulkanmod.accesswidener")
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
/*var Stage = "frag" //Overrides File Extension
//Indealy would add Mu;toTherad Invoke/Compile but will keep things simple for now
final String glslc = "assets/vulkanmod/glslc.exe"
task:PrecompShaders(type: exec, File, String)
		{
			exec {glslc "-fshader-stage=vert blit_screen.frag -c -mfmt=c -finvert-y  -fshader-stage=Stage --target-env=vulkan1.3 -O -o -"}
		}*/
//var namesFrag = []
//var namesvert = []
//class tstA
//{
//	static int i =1
//	static String aa="";
//
//}
//
//task genFraggerFiles(type: Copy) {
//
//		from "$projectDir\\src\\main\\resources\\assets\\vulkanmod\\shaders\\core"
//		into 'temDir/Fragger'
//		include '**/*.fsh'
//		exclude '**/*.vsh'
////	from "$projectDir\\src\\main\\resources\\assets\\vulkanmod\\shaders\\core"
////				into 'temDir/Vertxs'
////				include '**/*.vsh'
////				exclude '**/*.fsh'
//		System.out.println("$projectDir\\src\\main\\resources\\assets\\vulkanmod\\shaders\\core")
//		fileTree("temDir/Fragger").visit { FileVisitDetails details ->
//			namesFrag << details.file.name.substring(0, details.file.name.indexOf("."))
//		}
//		System.out.println(namesFrag);
//}
//
//task genVertxsFiles(type: Copy)
//{
//		from "$projectDir\\src\\main\\resources\\assets\\vulkanmod\\shaders\\core"
//		into 'temDir/Vertxs'
//		include '**/*.vsh'
//		exclude '**/*.fsh'
////	from "$projectDir\\src\\main\\resources\\assets\\vulkanmod\\shaders\\core"
////				into 'temDir/Vertxs'
////				include '**/*.vsh'
////				exclude '**/*.fsh'
//		System.out.println("$projectDir\\src\\main\\resources\\assets\\vulkanmod\\shaders\\core")
//		fileTree("temDir/Vertxs").visit { FileVisitDetails details2 ->
//			namesvert << details2.file.name.substring(0, details2.file.name.indexOf("."))
//		}
//		System.out.println(namesvert);
////	String Stage = "Fragment"
////	for(String path : paths)
////	{
////		PrecompShaders(path, stage)
////	}
////
////	filter(ReplaceTokens, tokens: [someToken: 'someReplacement'])
//}
//task a(type:Exec) {
//	workingDir "temDir/Fragger"
//	dependsOn tasks.genFraggerFiles
//	//on windows:
////	commandLine 'cmd', '/c', 'stop.bat'
////	logging.captureStandardOutput LogLevel.INFO
////	standardInput = new ByteArrayInputStream()
////	file = new File().canExecute(true, true);
////	standardOutput = new ByteArrayOutputStream()
//
//
//	var file = new FileOutputStream("$projectDir\\src\\main\\java\\net\\vulkanmod\\sdrs\\a.java")
////	ArrayList<Integer> buf= []
//	String cl="package net.vulkanmod.sdrs;\n" +
//			"\n" +
//			"import java.nio.IntBuffer;\n" +
//			"import static org.lwjgl.system.MemoryUtil.memAddress;\n" +
//			"\n" +
//			"public class  a\n{\n public static int currentSize;\n"
//	file.write(cl.getBytes())
//
////	for(int i=0;i<namesFrag.size();i++)
////	{
////		file.write((namesFrag[i] + ((i == namesFrag.size() - 1) ? ";\n" : ",\n")).getBytes())
////	}
//
////	file.write(("public static int[] getFunc(a aa) \n { \n\t switch(aa) \n { \n\t").getBytes())
//	final var String aaa= "}));\n}\n"
//	for(int i=0;i<namesFrag.size();i++)
//	{
//		new ByteArrayOutputStream().withStream{ os ->
//			exec {
//				workingDir "temDir/Fragger"
//				executable = 'glslc'
//				commandLine(executable, '-fshader-stage=frag', namesFrag[i]+".fsh", '-c', '-mfmt=num', '-O', '-o', '-')
//				standardOutput = os
//				ignoreExitValue(true)
//			}
//
//				tstA.aa = "private static IntBuffer " + namesFrag[i] + "() \n { \n return (IntBuffer.wrap(new int[]{"
//				file.write(tstA.aa.getBytes())
//				file.write(os.toByteArray())
//				file.write((aaa).getBytes())
//				file.flush()
//
//
//
//		}
//	}
//	file.flush()
//	file.write(("public static IntBuffer getFunc(String aa) \n { \n\t IntBuffer ax = switch(aa) \n { \n\t").getBytes())
//	for(int i=0;i<namesFrag.size();i++)
//	{
//		file.write(("case "+"\""+namesFrag[i]+"\" ->"+namesFrag[i]+"();\n\t").getBytes())
//	}
//	String cltr="default -> throw new RuntimeException(\"Fail!: Invalid Shader File!\");\n};\ncurrentSize=ax.remaining()*Integer.BYTES;if(ax.capacity()<=8)\n" +
//			"{\n" +
//			" throw new RuntimeException(\"Fail!: Invalid Shader File!: -->\"+aa);\n" +
//			"}\nreturn (ax);\n}\n}"
//	file.write(cltr.getBytes())
//	file.close()
//
//
//
//
//
////	commandLine './stop.sh'
////	System.out.println(executionResult)
////	System.out.println(commandLine)
////	System.out.println(errorOutput)
////	//store the output instead of printing to the console:
////	System.out.println(standardOutput.toString())
//
//
//
//
//
////	//extension method stopTomcat.output() can be used to obtain the output:
///*		standardOutput = new ByteArrayOutputStream()
//	ext.output = {
//		return standardOutput.toByteArray();
//	}*/
//}
//task b(type:Exec) {
//	workingDir "temDir/Vertxs"
//	dependsOn tasks.genVertxsFiles
//	//on windows:
////	commandLine 'cmd', '/c', 'stop.bat'
////	logging.captureStandardOutput LogLevel.INFO
////	standardInput = new ByteArrayInputStream()
////	file = new File().canExecute(true, true);
////	standardOutput = new ByteArrayOutputStream()
//
//	var file = new FileOutputStream("$projectDir\\src\\main\\java\\net\\vulkanmod\\sdrs\\b.java")
////	ArrayList<Integer> buf= []
//	String cl="package net.vulkanmod.sdrs;\n" +
//			"\n" +
//			"import java.nio.IntBuffer;\n" +
//			"import static org.lwjgl.system.MemoryUtil.memAddress;\n" +
//			"\n" +
//			"public class  b\n{\n public static int currentSize;\n"
//	file.write(cl.getBytes())
//
////	for(int i=0;i<namesFrag.size();i++)
////	{
////		file.write((namesFrag[i] + ((i == namesFrag.size() - 1) ? ";\n" : ",\n")).getBytes())
////	}
//
////	file.write(("public static int[] getFunc(a aa) \n { \n\t switch(aa) \n { \n\t").getBytes())
//	final var String aaa= "}));\n}\n"
//	for(int i=0;i<namesFrag.size();i++)
//	{
//		new ByteArrayOutputStream().withStream{ os ->
//			exec {
//				workingDir "temDir/Vertxs"
//				executable = 'glslc'
//				commandLine(executable, '-fshader-stage=vert', namesFrag[i]+".vsh", '-c', '-mfmt=num', '-O', '-o', '-')
//				standardOutput = os
//				ignoreExitValue(true)
//			}
//
//			tstA.aa = "private static IntBuffer " + namesFrag[i] + "() \n { \n return (IntBuffer.wrap(new int[]{"
//			file.write(tstA.aa.getBytes())
//			file.write(os.toByteArray())
//			file.write((aaa).getBytes())
//			file.flush()
//
//
//
//		}
//	}
//	file.flush()
//	file.write(("public static IntBuffer getFunc(String aa) \n { \n\t IntBuffer ax = switch(aa) \n { \n\t").getBytes())
//	for(int i=0;i<namesFrag.size();i++)
//	{
//		file.write(("case "+"\""+namesFrag[i]+"\" ->"+namesFrag[i]+"();\n\t").getBytes())
//	}
//	String cltr="default -> throw new RuntimeException(\"Fail!: Invalid Shader File!\");\n};\ncurrentSize=ax.remaining()*Integer.BYTES;if(ax.capacity()<=8)\n" +
//			"{\n" +
//			" throw new RuntimeException(\"Fail!: Invalid Shader File!: -->\"+aa);\n" +
//			"}\nreturn (ax);\n}\n}"
//	file.write(cltr.getBytes())
//	file.close()
//
//
//
//
//
////	commandLine './stop.sh'
////	System.out.println(executionResult)
////	System.out.println(commandLine)
////	System.out.println(errorOutput)
////	//store the output instead of printing to the console:
////	System.out.println(standardOutput.toString())
//
//
//
//
//
////	//extension method stopTomcat.output() can be used to obtain the output:
///*		standardOutput = new ByteArrayOutputStream()
//	ext.output = {
//		return standardOutput.toByteArray();
//	}*/
//}
def tarArtifactTask(String ext) {
	println ext

}
String Tst()
{
	return a.outputs
}

task gitRev(type: Exec) {
	commandLine 'git', 'log', '-1', '--format=%H'
	standardOutput = new ByteArrayOutputStream()
	ext.variable = {
		standardOutput.toString('UTF-8')
	}
}