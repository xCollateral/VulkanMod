plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'maven-publish'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    modRuntimeOnly "maven.modrinth:modmenu:7.2.2"

    include(runtimeOnly("org.lwjgl:lwjgl-vulkan:$lwjglVersion"))
    include(runtimeOnly("org.lwjgl:lwjgl-vulkan:$lwjglVersion:$macosNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-vulkan:$lwjglVersion:$macosArmNatives"))

    include(runtimeOnly("org.lwjgl:lwjgl-vma:$lwjglVersion"))
    include(runtimeOnly("org.lwjgl:lwjgl-vma:$lwjglVersion:$winNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-vma:$lwjglVersion:$linuxNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-vma:$lwjglVersion:$macosNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-vma:$lwjglVersion:$macosArmNatives"))

    include(runtimeOnly("org.lwjgl:lwjgl-shaderc:$lwjglVersion"))
    include(runtimeOnly("org.lwjgl:lwjgl-shaderc:$lwjglVersion:$winNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-shaderc:$lwjglVersion:$linuxNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-shaderc:$lwjglVersion:$macosNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-shaderc:$lwjglVersion:$macosArmNatives"))

    include(implementation("com.google.code.findbugs:jsr305:3.0.2"))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    //classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set('fabric')
}

jar {
    archiveClassifier.set("dev")
    manifest {
        attributes('Main-Class': "net.vulkanmod.Initalizer")
    }

    sourcesJar {
        def commonSources = project(":common").sourcesJar
        dependsOn commonSources
        from commonSources.archiveFile.map { zipTree(it) }
    }

    components.java {
        withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
            skip()
        }
    }

    publishing {
        publications {
            mavenFabric(MavenPublication) {
                artifactId = rootProject.archives_base_name + "-" + project.name
                from components.java
            }
        }
    }
}